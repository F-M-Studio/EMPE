name: Build and Release EMPE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  BUILD_TYPE: Release
  APP_NAME: lidar

jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.get-info.outputs.date }}
      shorthash: ${{ steps.get-info.outputs.shorthash }}
      fullhash: ${{ steps.get-info.outputs.fullhash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit information
        id: get-info
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "shorthash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "fullhash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  windows-qt:
    runs-on: windows-latest
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Configure build for x86
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64_x86

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.3
          target: desktop
          arch: win64_msvc2022_64
          modules: qtserialport qtcharts
          use-official: false

      - name: verify folder dir
        run: |
          dir D:\a\EMPE\Qt\6.8.3\msvc2022_64\bin\
          dir D:\a\EMPE\Qt\6.8.3\msvc2022_64\lib\
          dir D:\a\EMPE\Qt\6.8.3\msvc2022_64\lib\cmake\Qt6\
          dir D:\a\EMPE\Qt\6.8.3\msvc2022_64\modules\

      - name: Configure & Build
        shell: bash
        run: |
          cmake -G "Ninja" -A x64 -B build \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_PREFIX_PATH="D:/a/EMPE/Qt/6.8.3/msvc2022_64/lib/cmake"
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Deploy Qt dependencies
        run: |
          $MingwPath = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          $QtBinPath = "D:\a\EMPE\Qt\6.8.3\msvc2022_64\bin"
          Copy-Item "$MingwPath\libgcc_s_seh-1.dll" -Destination "build"
          Copy-Item "$MingwPath\libstdc++-6.dll" -Destination "build"
          Copy-Item "$MingwPath\libwinpthread-1.dll" -Destination "build"
          & "$QtBinPath\windeployqt.exe" --compiler-runtime --no-translations build\lidar.exe

      - name: Package Windows Build
        run: |
          mkdir output
          xcopy build output\ /E /H /C /I
          7z a lidar-windows-${{ needs.get-info.outputs.shorthash }}.zip .\output\*

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: lidar-windows-*.zip

  macos-qt:
    runs-on: macos-latest
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Ninja
        run: brew install ninja

      - name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.3
          host: mac
          target: desktop
          arch: clang_64
          modules: qtserialport qtcharts

      - name: Configure & Build
        run: |
          cmake -G "Ninja" -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Package macOS Build
        run: |
          mkdir output
          cp -R build/lidar.app output/
          zip -r lidar-macos-${{ needs.get-info.outputs.shorthash }}.zip output/*

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: lidar-macos-*.zip
  linux-qt:
    runs-on: ubuntu-24.04
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt install -y \
          libx11-dev libxext-dev libwayland-dev libdecor-0-dev \
          libxkbcommon-dev libglfw3-dev libgles2-mesa-dev libfuse2 \
          clang build-essential ninja-build \
          libasound2-dev libpulse-dev libopenal-dev libudev-dev
      - name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.3
          host: linux
          target: desktop
          arch: linux_gcc_64
          modules: qtserialport qtcharts
      - name: Check Qt version
        run: |
          qmake6 -v || qtpaths6 --qt-version
      - name: Configure CMake
        run: |
          cmake --fresh -G Ninja -B build \
            -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
            -DCMAKE_PREFIX_PATH="/usr/lib/x86_64-linux-gnu/cmake/Qt6"
      - name: Build
        run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel $(nproc) -- -v

      - name: Verify build output
        run: |
          ls -lR build
      - name: Package and Upload Linux artifact
        run: |
          mkdir -p upload
          cp build/${{ env.APP_NAME }} upload/
          tar czvf ${{ env.APP_NAME }}-linux-${{ needs.get-info.outputs.shorthash }}.tar.gz -C upload .
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: ${{ env.APP_NAME }}-linux-*.tar.gz