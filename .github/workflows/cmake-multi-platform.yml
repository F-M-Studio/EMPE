name: Build and Release EMPE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  BUILD_TYPE: Release
  APP_NAME: lidar

jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.get-info.outputs.date }}
      shorthash: ${{ steps.get-info.outputs.shorthash }}
      fullhash: ${{ steps.get-info.outputs.fullhash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit information
        id: get-info
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "shorthash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "fullhash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  windows-qt:
    runs-on: windows-latest
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup MinGW
        uses: coffeebe4code/setup-mingw@v1-beta-2
        with:
          platform: x64
          version: 11.2.0

      - name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.2'
          host: windows
          target: desktop
          arch: win64_mingw
          modules: qtserialport qtcharts

      - name: Configure & Build
        shell: bash
        run: |
          cmake -G "MinGW Makefiles" -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_PREFIX_PATH=${{ env.QT_PATH }}/mingw_64/lib/cmake
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Deploy Qt dependencies
        run: |
          $MingwPath = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          $QtBinPath = "${{ env.QT_PATH }}\mingw_64\bin"
          Copy-Item "$MingwPath\libgcc_s_seh-1.dll" -Destination "build"
          Copy-Item "$MingwPath\libstdc++-6.dll" -Destination "build"
          Copy-Item "$MingwPath\libwinpthread-1.dll" -Destination "build"
          & "$QtBinPath\windeployqt.exe" --compiler-runtime --no-translations build\lidar.exe

      - name: Package Windows Build
        run: |
          mkdir output
          xcopy build output\ /E /H /C /I
          7z a lidar-windows-${{ needs.get-info.outputs.shorthash }}.zip .\output\*

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: lidar-windows-*.zip

  macos-qt:
    runs-on: macos-latest
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Ninja
        run: brew install ninja

      - name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.2
          host: mac
          target: desktop
          arch: clang_64
          modules: qtserialport qtcharts

      - name: Configure & Build
        run: |
          cmake -G "Ninja" -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Package macOS Build
        run: |
          mkdir output
          cp -R build/lidar.app output/
          zip -r lidar-macos-${{ needs.get-info.outputs.shorthash }}.zip output/*

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: lidar-macos-*.zip

  linux-qt:
    runs-on: ubuntu-22.04
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build build-essential libgl1-mesa-dev libxkbcommon-x11-dev libfuse2

      - name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.2'
          host: linux
          target: desktop
          modules: qtserialport qtcharts

      - name: Configure & Build
        run: |
          cmake -G "Ninja" -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Download linuxdeployqt
        run: |
          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage

      - name: Package Linux Build (AppImage)
        run: |
          mkdir -p output/
          cp build/lidar output/
          ./linuxdeployqt-continuous-x86_64.AppImage output/lidar -appimage

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: ./*-x86_64.AppImage
