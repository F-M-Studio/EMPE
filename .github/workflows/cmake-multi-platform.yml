name: Build and Release EMPE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  BUILD_TYPE: Release
  APP_NAME: lidar

jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.get-info.outputs.date }}
      shorthash: ${{ steps.get-info.outputs.shorthash }}
      fullhash: ${{ steps.get-info.outputs.fullhash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit information
        id: get-info
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "shorthash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "fullhash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  windows-mingw:
    runs-on: windows-latest
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install MinGW & Ninja
        run: |
          choco install mingw ninja -y
          echo "C:\ProgramData\chocolatey\bin" >> $GITHUB_PATH
          echo "C:\Program Files\mingw-w64\mingw64\bin" >> $GITHUB_PATH
          echo "Using MinGW: $(where g++)"

      - name: Set Environment Variables for MinGW
        shell: cmd
        run: |
          setx CMAKE_C_COMPILER "C:\Program Files\mingw-w64\mingw64\bin\gcc.exe"
          setx CMAKE_CXX_COMPILER "C:\Program Files\mingw-w64\mingw64\bin\g++.exe"

      - name: Configure CMake
        shell: cmd
        run: |
          cmake -G "Ninja" -B build ^
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} ^
            -DCMAKE_C_COMPILER="C:\Program Files\mingw-w64\mingw64\bin\gcc.exe" ^
            -DCMAKE_CXX_COMPILER="C:\Program Files\mingw-w64\mingw64\bin\g++.exe"

      - name: Build
        shell: cmd
        run: cmake --build build --config ${{ env.BUILD_TYPE }} --parallel %NUMBER_OF_PROCESSORS%

      - name: Deploy Qt Dependencies (MinGW)
        shell: cmd
        run: |
          if exist "build\lidar.exe" (
            echo "lidar.exe found, running windeployqt"
            where windeployqt.exe
            if exist "%Qt6_DIR%\bin\windeployqt.exe" (
              "%Qt6_DIR%\bin\windeployqt.exe" --release --no-translations --no-system-d3d-compiler ^
              --dir build build\lidar.exe
            ) else (
              echo "ERROR: windeployqt.exe not found!"
              exit 1
            )
          ) else (
            echo "ERROR: lidar.exe NOT FOUND!"
            exit 1
          )

      - name: Copy Missing DLLs (MinGW)
        shell: cmd
        run: |
          if not exist "build\libgcc_s_seh-1.dll" (
            echo "Copying MinGW runtime DLLs..."
            copy "C:\Program Files\mingw-w64\mingw64\bin\libgcc_s_seh-1.dll" "build\"
            copy "C:\Program Files\mingw-w64\mingw64\bin\libstdc++-6.dll" "build\"
            copy "C:\Program Files\mingw-w64\mingw64\bin\libwinpthread-1.dll" "build\"
          )

      - name: Package Windows Build
        shell: cmd
        run: |
          mkdir "${{ runner.temp }}\upload"
          copy build\lidar.exe "${{ runner.temp }}\upload\"
          7z a "${{ runner.temp }}\lidar-windows-${{ needs.get-info.outputs.shorthash }}.zip" "${{ runner.temp }}\upload\*"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: "${{ runner.temp }}/lidar-windows-*.zip"

  macos-qt:
    runs-on: macos-latest
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Ninja
        run: brew install ninja

      - name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.2
          host: mac
          target: desktop
          arch: clang_64
          modules: qtserialport qtcharts

      - name: Configure & Build
        run: |
          cmake -G "Ninja" -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Package macOS Build
        run: |
          mkdir output
          cp -R build/lidar.app output/
          zip -r lidar-macos-${{ needs.get-info.outputs.shorthash }}.zip output/*

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-macos-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: lidar-macos-*.zip
          
  linux-qt:
    runs-on: ubuntu-24.04
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt install -y \
          ninja-build qt6-base-dev qt6-tools-dev qt6-serialport-dev libqt6charts6-dev \
          libxkbcommon-dev libx11-dev libxext-dev libglfw3-dev libgles2-mesa-dev

      - name: Configure & Build
        run: |
          cmake -G "Ninja" -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Package Linux Build
        run: |
          mkdir output
          cp build/lidar output/
          tar czvf lidar-linux-${{ needs.get-info.outputs.shorthash }}.tar.gz -C output .

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: lidar-linux-*.tar.gz
