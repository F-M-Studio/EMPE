name: Build and Release EMPE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  BUILD_TYPE: Release
  APP_NAME: EMPE

jobs:
  get-info:
    runs-on: ubuntu-latest
    steps:
    - name: Get commit information
      id: get-info
      run: |
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
        echo "shorthash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "fullhash=$(git rev-parse HEAD)" >> $GITHUB_ENV

  windows-qt:
    runs-on: windows-2022
    needs: get-info
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Ninja
      run: choco install ninja -y

    - name: Setup Visual Studio Environment
      uses: ilammy/msvc-dev-cmd@v1.13.0
      with:
        arch: amd64

    - name: Setup Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: 6.8.2  # Revert to known working version
        host: windows
        target: desktop
        arch: win64_msvc2022_64
        modules: qtbase qttools qtmultimedia qtserialport qtcharts

    - name: Configure CMake
      run: |
        cmake --fresh -G Ninja -B build `
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
          -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}"

    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel $env:NUMBER_OF_PROCESSORS

    - name: Package and Upload Windows artifact
      run: |
        mkdir upload
        mv build/EMPE.exe upload/
        tar cf EMPE-windows-qt.tar.gz -C upload .
    - uses: actions/upload-artifact@v4
      with:
        name: EMPE-windows-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
        path: EMPE-windows-qt.tar.gz

  linux-qt:
    runs-on: ubuntu-24.04
    needs: get-info
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt install -y \
        libx11-dev libxext-dev libwayland-dev libdecor-0-dev \
        libxkbcommon-dev libglfw3-dev libgles2-mesa-dev libfuse2 \
        clang build-essential ninja-build \
        qt6-base-dev qt6-tools-dev qt6-multimedia-dev \
        qt6-serialport-dev libqt6charts6-dev \  # Correct charts package
        libasound2-dev libpulse-dev libopenal-dev libudev-dev

    - name: Configure CMake
      run: |
        cmake --fresh -G Ninja -B build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_PREFIX_PATH="/usr/lib/x86_64-linux-gnu/cmake/Qt6"

    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel $(nproc)

    - name: Package and Upload Linux artifact
      run: |
        tar cf EMPE-linux-qt.tar.gz -C build EMPE
    - uses: actions/upload-artifact@v4
      with:
        name: EMPE-linux-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
        path: EMPE-linux-qt.tar.gz

  # Keep macos-qt and pre-release jobs from previous answer
  pre-release:
    if: github.ref == 'refs/heads/main' && github.repository == 'F-M-Studio/EMPE' && github.event_name == 'push'
    needs: [get-info, windows-qt, macos-qt, linux-qt]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
  
    - name: Compress individual directories (without parent directory)
      run: |
        cd ./artifacts
        for dir in */; do
          if [ -d "$dir" ]; then
            dir_name=${dir%/}
            echo "Creating zip for $dir_name"
            (cd "$dir_name" && zip -r "../${dir_name}.zip" .)
          fi
        done
  
    - name: Get latest release information
      id: get_latest_release
      env:
        GITHUB_TOKEN: ${{ secrets.EMPE_TOKEN_REPO }}
      run: |
        api_url="https://api.github.com/repos/${{ github.repository }}"
        latest_release_info=$(curl -H "Authorization: token $GITHUB_TOKEN" "$api_url/releases/latest")
        echo "last_release_tag=$(echo "$latest_release_info" | jq -r '.tag_name')" >> $GITHUB_ENV

    - name: Create Pre-Release on GitHub
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.EMPE_TOKEN_REPO }}
        name: "Pre-release-EMPE-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}"
        tag: "Pre-release-EMPE-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}"
        draft: false
        prerelease: true
        body: "Full Changelog: [${{ env.last_release_tag }}...${{ needs.get-info.outputs.shorthash }}](https://github.com/F-M-Studio/EMPE/compare/${{ env.last_release_tag }}...${{ needs.get-info.outputs.fullhash }})"
        artifacts: ./artifacts/*.zip

    - name: Publish to Release Repository
      env:
        GITHUB_TOKEN: ${{ secrets.EMPE_TOKEN_REPO }}
      run: |
        ARTIFACTS_DIR=./artifacts
        REPO_WINDOWS="F-M-Studio/EMPE-binaries-Windows"
        REPO_LINUX="F-M-Studio/EMPE-binaries-Linux"
        REPO_MAC="F-M-Studio/EMPE-binaries-Mac"

        for file in "$ARTIFACTS_DIR"/*.zip; do
          filename=$(basename "$file")
          REPO=""

          # Determine repository based on file name
          if [[ "$filename" == *"win64"* ]]; then
            REPO=$REPO_WINDOWS
          elif [[ "$filename" == *"linux"* ]] || [[ "$filename" == *"ubuntu64"* ]]; then
            REPO=$REPO_LINUX
          elif [[ "$filename" == *"macos"* ]]; then
            REPO=$REPO_MAC
          fi

          # If REPO is empty, skip file
          if [[ -z "$REPO" ]]; then
            echo "No matching repository for $filename"
            continue
          fi

          # Check if release already exists and get ID
          release_id=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases/tags/Pre-release-EMPE-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}" | jq -r '.id')

          if [[ "$release_id" == "null" ]]; then
            echo "Creating release in $REPO for $filename"
            release_id=$(curl -s -X POST -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{
                "tag_name": "Pre-release-EMPE-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}",
                "name": "Pre-release-EMPE-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}",
                "draft": false,
                "prerelease": true,
                "body": "Commit: [${{ needs.get-info.outputs.fullhash }}](https://github.com/F-M-Studio/EMPE/commit/${{ needs.get-info.outputs.fullhash }})"
              }' "https://api.github.com/repos/$REPO/releases" | jq -r '.id')
          else
            echo "Release already exists in $REPO with ID $release_id"
          fi

          # Artifact upload
          echo "Uploading $filename to release $release_id in $REPO"
          upload_url="https://uploads.github.com/repos/$REPO/releases/$release_id/assets?name=$filename"
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" -H "Content-Type: application/octet-stream" --data-binary @"$file" "$upload_url"
        done
        
    - name: Get current pre-release information
      env:
        GITHUB_TOKEN: ${{ secrets.EMPE_TOKEN_REPO }}
      run: |
        api_url="https://api.github.com/repos/${{ github.repository }}"
        latest_release_info=$(curl -H "Authorization: token $GITHUB_TOKEN" "$api_url/releases/tags/Pre-release-EMPE-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}")
        echo "last_release_tag=$(echo "$latest_release_info" | jq -r '.tag_name')" >> $GITHUB_ENV
