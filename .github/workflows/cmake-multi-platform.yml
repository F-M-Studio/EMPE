name: Build and Release EMPE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  BUILD_TYPE: Release
  APP_NAME: lidar

jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.get-info.outputs.date }}
      shorthash: ${{ steps.get-info.outputs.shorthash }}
      fullhash: ${{ steps.get-info.outputs.fullhash }}
    steps:
      - uses: actions/checkout@v4
      - name: Get commit information
        id: get-info
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "shorthash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "fullhash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

  windows-qt:
    runs-on: windows-latest
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Ninja
        run: choco install ninja -y
      
      - name: Setup Visual Studio Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
      
      - name: Setup Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: 6.8.2
          host: windows
          target: desktop
          arch: win64_msvc2022_64
          modules: qtserialport qtcharts
          cache: true

      - name: Configure & Build
        run: |
          cmake -G "Ninja" -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Package Windows Build
        run: |
          mkdir output
          copy build\\lidar.exe output\\
          7z a lidar-windows-${{ needs.get-info.outputs.shorthash }}.zip output/*

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-windows-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: lidar-windows-*.zip

  linux-qt:
    runs-on: ubuntu-24.04
    needs: get-info
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt install -y \
          ninja-build qt6-base-dev qt6-tools-dev qt6-serialport-dev libqt6charts6-dev \
          libxkbcommon-dev libx11-dev libxext-dev libglfw3-dev libgles2-mesa-dev

      - name: Configure & Build
        run: |
          cmake -G "Ninja" -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          cmake --build build --config ${{ env.BUILD_TYPE }} --parallel

      - name: Package Linux Build
        run: |
          mkdir output
          cp build/lidar output/
          tar czvf lidar-linux-${{ needs.get-info.outputs.shorthash }}.tar.gz -C output .

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-linux-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
          path: lidar-linux-*.tar.gz
