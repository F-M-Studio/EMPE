name: Build and Release EMPE

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  BUILD_TYPE: Release
  APP_NAME: lidar  # Match CMake project name

jobs:
  get-info:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.get-info.outputs.date }}
      shorthash: ${{ steps.get-info.outputs.shorthash }}
      fullhash: ${{ steps.get-info.outputs.fullhash }}
    steps:
    - name: Get commit information
      id: get-info
      run: |
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "shorthash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "fullhash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
windows-qt:
  runs-on: windows-2022
  needs: get-info
  steps:
  - uses: actions/checkout@v4
    with:
      submodules: recursive

  - name: Install Ninja
    run: choco install ninja -y

  - name: Setup Visual Studio Environment
    uses: ilammy/msvc-dev-cmd@v1.13.0
    with:
      arch: amd64

  - name: Setup Qt
    uses: jurplel/install-qt-action@v4
    with:
      version: 6.8.2
      host: windows
      target: desktop
      arch: win64_msvc2022_64
      modules: qtbase qttools qtcharts qtserialport  # Core modules required

  - name: Configure CMake
    run: |
      cmake --fresh -G Ninja -B build `
        -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
        -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}"

  - name: Build
    run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel $env:NUMBER_OF_PROCESSORS

  - name: Deploy Qt Dependencies
    run: |
      "${{ env.Qt6_DIR }}/bin/windeployqt.exe" --release --dir build build/${{ env.APP_NAME }}.exe

  - name: Package and Upload
    run: |
      mkdir upload
      cp build/${{ env.APP_NAME }}.exe upload/
      7z a ${{ env.APP_NAME }}-windows-${{ needs.get-info.outputs.shorthash }}.zip ./upload/*
  - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-windows-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
        path: ${{ env.APP_NAME }}-windows-*.zip

  linux-qt:
    runs-on: ubuntu-24.04
    needs: get-info
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt install -y \
        libx11-dev libxext-dev libwayland-dev libdecor-0-dev \
        libxkbcommon-dev libglfw3-dev libgles2-mesa-dev libfuse2 \
        clang build-essential ninja-build \
        qt6-base-dev qt6-tools-dev qt6-multimedia-dev \
        qt6-serialport-dev libqt6charts6-dev \
        libasound2-dev libpulse-dev libopenal-dev libudev-dev

    - name: Configure CMake
      run: |
        cmake --fresh -G Ninja -B build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_PREFIX_PATH="/usr/lib/x86_64-linux-gnu/cmake/Qt6"

    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel $(nproc)

    - name: Verify build output
      run: |
        ls -lR build

    - name: Package and Upload Linux artifact
      run: |
        mkdir -p upload
        cp build/${{ env.APP_NAME }} upload/
        tar czvf ${{ env.APP_NAME }}-linux-${{ needs.get-info.outputs.shorthash }}.tar.gz -C upload .
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-linux-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
        path: ${{ env.APP_NAME }}-linux-*.tar.gz

  macos-qt:
    runs-on: macos-15
    needs: get-info
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest

    - name: Setup Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: 6.8.2
        host: mac
        target: desktop
        arch: clang_64
        modules: qtbase qttools qtmultimedia qtserialport qtcharts

    - name: Configure CMake
      run: |
        cmake --fresh -G Ninja -B build \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64"

    - name: Build
      run: cmake --build build --config ${{env.BUILD_TYPE}} --parallel $(sysctl -n hw.ncpu)

    - name: Deploy Qt Dependencies
      run: |
        macdeployqt build/${{ env.APP_NAME }}.app -verbose=2

    - name: Package and Upload macOS artifact
      run: |
        7z a ${{ env.APP_NAME }}-macos-${{ needs.get-info.outputs.shorthash }}.zip ./build/${{ env.APP_NAME }}.app
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-macos-${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}
        path: ${{ env.APP_NAME }}-macos-*.zip

  pre-release:
    if: github.ref == 'refs/heads/main' && github.repository == 'F-M-Studio/EMPE' && github.event_name == 'push'
    needs: [get-info, windows-qt, macos-qt, linux-qt]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: "${{ env.APP_NAME }} ${{ needs.get-info.outputs.date }} (${{ needs.get-info.outputs.shorthash }})"
        tag_name: "v${{ needs.get-info.outputs.date }}-${{ needs.get-info.outputs.shorthash }}"
        body: |
          Automated build from main branch
          Commit: ${{ needs.get-info.outputs.fullhash }}
        prerelease: true
        files: |
          artifacts/*.zip
          artifacts/*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.EMPE_TOKEN_REPO }}
